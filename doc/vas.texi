\input texinfo

@c %**start of header
@set VERSION 1.0
@settitle Vision and Scope Document for @acronym{WIDE}
@setfilename wide-vas.info
@paragraphindent 0
@setchapternewpage odd
@c %**end of header

@copying 
This is the Vision and Scope document for the @acronym{wide} project.

Copyright @copyright{} 2017 Christian Brunello.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled "GNU Free
Documentation License".
@end quotation
@end copying

@titlepage
@title Vision and Scope Document
@subtitle @acronym{WIDE, Well Integrated Development Environment}
@author Christian Brunello
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@node Top, Problem statement, , (dir)
@top Vision and Scope
@end ifnottex

@menu
* Problem statement::
* Vision of the solution::
* GNU Free Documentation License::
@end menu

@iftex
@contents
@end iftex

@node Problem statement, , Top
@chapter Problem statement

@menu
* Project background::
* Stakeholders::
* Users::
* Risks::
* Assumptions::
@end menu

@node Project background, Stakeholders, , Problem statement
@section Project background

We programmers often find ourselves having to use specific programs
depending on the kind of development we have to do. The result is that
we can not focus on writing code, but we must also learn how to use
the program.

There is no complete development system. Some offer great features, but
there is always a need to open some other programs to do simple things
like transferring files, seeing results, debugging, and so on.

The screen is not always optimized, but is split between different
components, even when they are not used.

When writing code for many hours, moving our hand from the keyboard
to the mouse and then putting it back on the keyboard, many times,
it gets tiring. Almost all development systems design the graphics by thinking of the
mouse. 

At this point, if we want a system suitable for all kinds of programming,
optimized in space, fast, and that helps us in all the tasks@dots{} we have
to create it!

@node Stakeholders, Users, Project background, Problem statement
@section Stakeholders
This project is free, so interested parties are all people in the world, 
especially programmers.

@node Users, Risks, Stakeholders, Problem statement
@section Users

The users of this project will be programmers. We can identify the
following categories: @dfn{Application developers}, @dfn{System
developers}, @dfn{Game developers} and @dfn{Web developers}.

@node Risks, Assumptions, Users, Problem statement
@section Risks
The main risk of this project is the failure to support all kinds of
programming, and the tasks related to each. Even if we do not develop
everything right away, we have to set up the system so that it supports
all the common features of a development system and prepare it so that
it's easy to add new ones.

@node Assumptions, , Risks, Problem statement
@section Assumptions

There are few assumptions underlying this system:
@itemize
@item The operating system is UNIX compatible.
@item The operating system provides a window system.
@item The device is equipped with a qwerty keyboard.
@item The device is equipped with a screen.
@end itemize

@node Vision of the solution, Vision statement, Problem statement, Top
@chapter Vision of the solution

@menu
* Vision statement::
* List of features::
* Features that will not be developed::
@end menu

@node Vision statement, List of features, , Vision of the solution
@section Vision statement

The purpose of this project is to create a complete development system.

The system will support programmers in all tasks, in any development category.

The screen space will be handled in contexts. For each context only the 
affected windows will be displayed.

@node List of features, Features that will not be developed, Vision statement, Vision of the solution
@section List of features

The main features of this system are:

@table @emph
@item Context-based window management
Program windows are handled in contexts. When changing context, only
the windows belonging to this context will be visible.
@item Project management
With this system we can create specific projects for the work we have to do.
@item Navigation
The system offers a navigation program. From this program we can scan
files and work on them.
@item Editor
The system provides a program for editing text or binary files. The editor
supports all the most common features, and the most important file types.
@item Source navigation
The system allows us to surf the sources intelligently.
@item Assisted compilation
With this system we can compile our files without commands. Compilation
will be managed based on the language and type of project.
@item Assisted execution
With this system we can run our program without using commands, 
even if the program must be run on another machine.
@item Assisted debug
Debugging can be performed without using commands. We will support
debugging local or remote programs.
@end table

@node Features that will not be developed, , List of features, Vision of the solution
@section Features that will not be developed
We will not support all languages, but we will offer an interface to give
programmers the ability to add them.

We will not support all the tools, but we will offer an interface to
use them.

@node GNU Free Documentation License, , Vision statement, Top
@appendix GNU Free Documentation License
@include gnu-fdl.texi

@bye
